
<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>
			{% block title %}Hackat'Web
			{% endblock %}
		</title>
		{# Run `composer require symfony/webpack-encore-bundle`
				           and uncomment the following Encore helpers to start using Symfony UX #}
		{% block stylesheets %}
			{#{{ encore_entry_link_tags('app') }}#}


			<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">

		{% endblock %}
		<style>
			.hackathon {
				width: 25%;
				length: 25%
			}
			.connexion {
				margin-left: 200%
			}
		</style>

		{% block javascripts %}


			{#{{ encore_entry_script_tags('app') }}#}
		{% endblock %}

	</head>
	<body>
		<nav class="navbar navbar-expand-lg navbar-light bg-light">
			<div class="container-fluid">
				<nav class="navbar navbar-light bg-light">
					<div class="container-fluid">
						<a class="navbar-brand" href="/">
							<img src="https://upload.wikimedia.org/wikipedia/commons/c/c1/Hackathon_logo.jpg" width="80" height="80" class="d-inline-block align-text-top">
						</a>
					</div>
				</nav>
				<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
					<span class="navbar-toggler-icon"></span>
				</button>
				<div class="collapse navbar-collapse" id="navbarSupportedContent">
					<ul class="navbar-nav me-auto mb-2 mb-lg-0">
						<li class="nav-item">
							<a class="nav-link active" aria-current="page" href="{{path('listHack')}}">Les Hackathons</a>
						</li>
						<li class="nav-item">
							<a class="nav-link active" href="#">À propos des hackathons</a>
						</li>

					</ul>
					<form class="d-flex">
					
						{% if is_granted('IS_AUTHENTICATED_FULLY') %}
						<h5>Bonjour {{ app.user.prenom }}</h5>
							<a class="btn btn-danger" href="{{ path('security_logout') }}">Se déconnecter</a>
						{% else %}
						<a class="btn btn-success" href="{{ path('security_inscription') }}">S'inscrire</a> 
							<a class="btn btn-primary" href="{{ path('security_login') }}">Se connecter</a>
						{% endif %}

						<!-- The Modal -->
						<div class="modal" id="myModal">
							<div class="modal-dialog">
								<div
									class="modal-content">
									<!-- Modal Header -->
									<div class="modal-header">
										<h4 class="modal-title">Modal Heading</h4>
										<button type="button" class="close" data-dismiss="modal">&times;</button>
									</div>
									<!-- Modal body -->
									<div class="modal-body">
										Modal body..
									</div>
									<!-- Modal footer -->
									<div class="modal-footer">
										<button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
									</div>
								</div>
							</div>
						</div>

						<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
						<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
						<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
						
					</form>
				</div>
			</div>
		</nav>
		{% block body %}{% endblock %}
	</body>
</html>
{% if is_granted('IS_AUTHENTICATED_FULLY') %}

<script>
'use strict';

window.onload = function () { // Globals
var random = Math.random,
cos = Math.cos,
sin = Math.sin,
PI = Math.PI,
PI2 = PI * 2,
timer = undefined,
frame = undefined,
confetti = [];

var particles = 10,
spread = 40,
sizeMin = 3,
sizeMax = 12 - sizeMin,
eccentricity = 10,
deviation = 100,
dxThetaMin = -.1,
dxThetaMax = - dxThetaMin - dxThetaMin,
dyMin = .13,
dyMax = .18,
dThetaMin = .4,
dThetaMax = .7 - dThetaMin;

var colorThemes = [
function () {
return color(200 * random() | 0, 200 * random() | 0, 200 * random() | 0);
},
function () {
var black = 200 * random() | 0;
return color(200, black, black);
},
function () {
var black = 200 * random() | 0;
return color(black, 200, black);
},
function () {
var black = 200 * random() | 0;
return color(black, black, 200);
},
function () {
return color(200, 100, 200 * random() | 0);
},
function () {
return color(200 * random() | 0, 200, 200);
},
function () {
var black = 256 * random() | 0;
return color(black, black, black);
},
function () {
return colorThemes[random() < .5 ? 1 : 2]();
},
function () {
return colorThemes[random() < .5 ? 3 : 5]();
},
function () {
return colorThemes[random() < .5 ? 2 : 4]();
}
];
function color(r, g, b) {
return 'rgb(' + r + ',' + g + ',' + b + ')';
}

// Cosine interpolation
function interpolation(a, b, t) {
return(1 - cos(PI * t)) / 2 * (b - a) + a;
}

// Create a 1D Maximal Poisson Disc over [0, 1]
var radius = 1 / eccentricity,
radius2 = radius + radius;
function createPoisson() {
// domain is the set of points which are still available to pick from
// D = union{ [d_i, d_i+1] | i is even }
var domain = [
radius,
1 - radius
],
measure = 1 - radius2,
spline = [0, 1];
while (measure) {
var dart = measure * random(),
i,
l,
interval,
a,
b,
c,
d;

// Find where dart lies
for (i = 0, l = domain.length, measure = 0; i < l; i += 2) {
a = domain[i],
b = domain[i + 1],
interval = b - a;
if (dart < measure + interval) {
spline.push(dart += a - measure);
break;
}
measure += interval;
}
c = dart - radius,
d = dart + radius;

// Update the domain
for (i = domain.length - 1; i > 0; i -= 2) {
l = i - 1,
a = domain[l],
b = domain[i];
// c---d          c---d  Do nothing
// c-----d  c-----d    Move interior
// c--------------d    Delete interval
//         c--d          Split interval
//       a------b
if (a >= c && a < d) 
if (b > d) 
domain[l] = d;

 // Move interior (Left case) else 
domain.splice(l, 2);
 // Delete interval else if (a < c && b > c) 
if (b <= d) 
domain[i] = c;

 // Move interior (Right case) else 
domain.splice(i, 0, c, d);
 // Split interval
}

// Re-measure the domain
for (i = 0, l = domain.length, measure = 0; i < l; i += 2) 
measure += domain[i + 1] - domain[i];

}

return spline.sort();
}

// Create the overarching container
var container = document.createElement('div');
container.style.position = 'fixed';
container.style.top = '0';
container.style.left = '0';
container.style.width = '100%';
container.style.height = '0';
container.style.overflow = 'visible';
container.style.zIndex = '9999';

// Confetto constructor
function Confetto(theme) {
this.frame = 0;
this.outer = document.createElement('div');
this.inner = document.createElement('div');
this.outer.appendChild(this.inner);

var outerStyle = this.outer.style,
innerStyle = this.inner.style;
outerStyle.position = 'absolute';
outerStyle.width = (sizeMin + sizeMax * random()) + 'px';
outerStyle.height = (sizeMin + sizeMax * random()) + 'px';
innerStyle.width = '100%';
innerStyle.height = '100%';
innerStyle.backgroundColor = theme();

outerStyle.perspective = '50px';
outerStyle.transform = 'rotate(' + (
360 * random()
) + 'deg)';
this.axis = 'rotate3D(' + cos(360 * random()) + ',' + cos(360 * random()) + ',0,';
this.theta = 360 * random();
this.dTheta = dThetaMin + dThetaMax * random();
innerStyle.transform = this.axis + this.theta + 'deg)';

this.x = window.innerWidth * random();
this.y = - deviation;
this.dx = sin(dxThetaMin + dxThetaMax * random());
this.dy = dyMin + dyMax * random();
outerStyle.left = this.x + 'px';
outerStyle.top = this.y + 'px';

// Create the periodic spline
this.splineX = createPoisson();
this.splineY = [];
for (var i = 1, l = this.splineX.length - 1; i < l; ++ i) 
this.splineY[i] = deviation * random();

this.splineY[0] = this.splineY[l] = deviation * random();

this.update = function (height, delta) {
this.frame += delta;
this.x += this.dx * delta;
this.y += this.dy * delta;
this.theta += this.dTheta * delta;

// Compute spline and convert to polar
var phi = this.frame % 7777 / 7777,
i = 0,
j = 1;
while (phi >= this.splineX[j]) 
i = j++;

var rho = interpolation(this.splineY[i], this.splineY[j], (phi - this.splineX[i]) / (this.splineX[j] - this.splineX[i]));
phi *= PI2;

outerStyle.left = this.x + rho * cos(phi) + 'px';
outerStyle.top = this.y + rho * sin(phi) + 'px';
innerStyle.transform = this.axis + this.theta + 'deg)';
return this.y > height + deviation;
};
}

function poof() {
if (! frame) { // Append the container
document.body.appendChild(container);

// Add confetti
var theme = colorThemes[0],
count = 0;
(function addConfetto() {
var confetto = new Confetto(theme);
confetti.push(confetto);
container.appendChild(confetto.outer);
timer = setTimeout(addConfetto, spread * random());
})(0);

// Start the loop
var prev = undefined;
requestAnimationFrame(function loop(timestamp) {
var delta = prev ? timestamp - prev : 0;
prev = timestamp;
var height = window.innerHeight;

for (var i = confetti.length - 1; i >= 0; -- i) {
if (confetti[i].update(height, delta)) {
container.removeChild(confetti[i].outer);
confetti.splice(i, 1);
}
}

if (timer || confetti.length) 
return frame = requestAnimationFrame(loop);


// Cleanup
document.body.removeChild(container);
frame = undefined;
});
}
}

poof();
};
						</script>

{% endif %}